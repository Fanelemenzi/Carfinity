# Generated by Django 4.2.16 on 2025-08-17 20:38

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("vehicles", "0007_vehicleimage"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("maintenance", "0009_part_category_part_minimum_stock_level_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="InsurancePolicy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("policy_number", models.CharField(max_length=20, unique=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                (
                    "premium_amount",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("suspended", "Suspended"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "policy_holder",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("purchase_date", models.DateField()),
                (
                    "current_condition",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("poor", "Poor"),
                        ],
                        default="good",
                        max_length=20,
                    ),
                ),
                (
                    "vehicle_health_index",
                    models.FloatField(
                        default=100.0,
                        help_text="Vehicle Health Index (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "risk_score",
                    models.FloatField(
                        default=1.0,
                        help_text="Risk Score (0-10, higher is riskier)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("last_inspection_date", models.DateField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vehicles",
                        to="insurance_app.insurancepolicy",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vehicles",
                        to="vehicles.vehicle",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VehicleConditionScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assessment_date", models.DateField()),
                (
                    "engine_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "transmission_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "brake_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "tire_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "suspension_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "electrical_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "overall_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "assessment_type",
                    models.CharField(
                        choices=[
                            ("inspection", "Professional Inspection"),
                            ("telematics", "Telematics Data"),
                            ("obd", "OBD-II Diagnostic"),
                            ("self_report", "Self Reported"),
                        ],
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="condition_scores",
                        to="insurance_app.vehicle",
                    ),
                ),
            ],
            options={
                "ordering": ["-assessment_date"],
            },
        ),
        migrations.CreateModel(
            name="RiskAlert",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("high_risk_vehicle", "High Risk Vehicle"),
                            ("maintenance_overdue", "Maintenance Overdue"),
                            ("condition_deterioration", "Condition Deterioration"),
                            ("accident_pattern", "Accident Pattern"),
                            ("compliance_drop", "Compliance Drop"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("risk_score_impact", models.FloatField()),
                ("is_resolved", models.BooleanField(default=False)),
                ("resolved_date", models.DateTimeField(blank=True, null=True)),
                ("resolution_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_alerts",
                        to="insurance_app.vehicle",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "maintenance_type",
                    models.CharField(
                        choices=[
                            ("oil_change", "Oil Change"),
                            ("brake_service", "Brake Service"),
                            ("tire_rotation", "Tire Rotation"),
                            ("transmission", "Transmission Service"),
                            ("engine_tune", "Engine Tune-up"),
                            ("inspection", "Safety Inspection"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "priority_level",
                    models.CharField(
                        choices=[
                            ("critical", "Critical"),
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("scheduled_date", models.DateField()),
                ("due_mileage", models.IntegerField()),
                ("description", models.TextField(blank=True)),
                ("is_completed", models.BooleanField(default=False)),
                ("completed_date", models.DateField(blank=True, null=True)),
                (
                    "cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("service_provider", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "scheduled_maintenance",
                    models.OneToOneField(
                        blank=True,
                        help_text="Link to the detailed maintenance schedule",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="insurance_schedule",
                        to="maintenance.scheduledmaintenance",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenance_schedules",
                        to="insurance_app.vehicle",
                    ),
                ),
            ],
            options={
                "ordering": ["scheduled_date"],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceCompliance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "overall_compliance_rate",
                    models.FloatField(
                        default=100.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "critical_maintenance_compliance",
                    models.FloatField(
                        default=100.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("overdue_count", models.IntegerField(default=0)),
                ("completed_on_time_count", models.IntegerField(default=0)),
                ("total_scheduled_count", models.IntegerField(default=0)),
                ("last_calculated", models.DateTimeField(auto_now=True)),
                (
                    "vehicle",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="compliance",
                        to="insurance_app.vehicle",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Accident",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("accident_date", models.DateTimeField()),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("minor", "Minor"),
                            ("moderate", "Moderate"),
                            ("major", "Major"),
                            ("total_loss", "Total Loss"),
                        ],
                        max_length=20,
                    ),
                ),
                ("claim_amount", models.DecimalField(decimal_places=2, max_digits=12)),
                ("description", models.TextField()),
                ("maintenance_related", models.BooleanField(default=False)),
                (
                    "related_maintenance_type",
                    models.CharField(blank=True, max_length=20),
                ),
                (
                    "days_since_last_maintenance",
                    models.IntegerField(blank=True, null=True),
                ),
                ("fault_determination", models.CharField(blank=True, max_length=100)),
                ("location", models.CharField(max_length=200)),
                ("weather_conditions", models.CharField(blank=True, max_length=50)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accidents",
                        to="insurance_app.vehicle",
                    ),
                ),
                (
                    "vehicle_history",
                    models.OneToOneField(
                        blank=True,
                        help_text="Link to detailed vehicle history record for this accident",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="insurance_accident",
                        to="vehicles.vehiclehistory",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RiskAssessmentMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("calculation_date", models.DateField(auto_now_add=True)),
                ("portfolio_compliance_rate", models.FloatField()),
                ("critical_maintenance_compliance", models.FloatField()),
                ("avg_vehicle_health_index", models.FloatField()),
                ("vehicles_excellent_condition", models.IntegerField()),
                ("vehicles_poor_condition", models.IntegerField()),
                ("maintenance_related_accidents", models.IntegerField()),
                ("total_accidents", models.IntegerField()),
                ("accident_correlation_rate", models.FloatField()),
                ("high_risk_vehicles", models.IntegerField()),
                ("active_alerts", models.IntegerField()),
                ("resolved_alerts_30d", models.IntegerField()),
                (
                    "policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metrics",
                        to="insurance_app.insurancepolicy",
                    ),
                ),
            ],
            options={
                "ordering": ["-calculation_date"],
                "unique_together": {("policy", "calculation_date")},
            },
        ),
    ]
