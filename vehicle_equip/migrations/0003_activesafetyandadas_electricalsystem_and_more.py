# Generated by Django 4.2.16 on 2025-06-18 11:42

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("vehicles", "0005_vehicle_body_type_vehicle_plant_location_and_more"),
        ("vehicle_equip", "0002_chassissuspensionandbraking_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="ActiveSafetyAndADAS",
            fields=[
                (
                    "vehicle",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="active_safety",
                        serialize=False,
                        to="vehicles.vehicle",
                    ),
                ),
                (
                    "cruise_control_system",
                    models.CharField(
                        choices=[
                            ("NONE", "No Cruise Control"),
                            ("STD", "Standard Cruise Control"),
                            ("ACC", "Adaptive Cruise Control"),
                            ("ICC", "Intelligent Cruise Control"),
                            ("TJA", "Traffic Jam Assist"),
                        ],
                        default="NONE",
                        max_length=4,
                        verbose_name="Cruise Control Type",
                    ),
                ),
                (
                    "has_speed_limiter",
                    models.BooleanField(
                        default=False, verbose_name="Speed Limiter Function"
                    ),
                ),
                (
                    "park_distance_control",
                    models.CharField(
                        choices=[
                            ("NONE", "No Parking Assist"),
                            ("REAR", "Rear Parking Sensors"),
                            ("FULL", "Front/Rear Sensors"),
                            ("CAM", "Parking Camera"),
                            ("AUTO", "Automatic Parking"),
                        ],
                        default="NONE",
                        max_length=4,
                        verbose_name="Park Distance Control",
                    ),
                ),
                (
                    "driver_alert_system",
                    models.CharField(
                        choices=[
                            ("NONE", "No Alert System"),
                            ("FAT", "Fatigue Detection"),
                            ("DROWSY", "Drowsiness Alert"),
                            ("ATTN", "Attention Monitoring"),
                            ("DIST", "Distraction Warning"),
                        ],
                        default="NONE",
                        max_length=6,
                        verbose_name="Driver Alert System",
                    ),
                ),
                (
                    "tire_pressure_monitoring",
                    models.CharField(
                        choices=[
                            ("NONE", "No TPMS"),
                            ("IND", "Indirect TPMS"),
                            ("DIR", "Direct TPMS"),
                            ("ADV", "Advanced TPMS with Location"),
                        ],
                        default="NONE",
                        max_length=4,
                        verbose_name="Tire Pressure Monitoring",
                    ),
                ),
                (
                    "lane_assist_system",
                    models.CharField(
                        choices=[
                            ("NONE", "No Lane Assist"),
                            ("LDW", "Lane Departure Warning"),
                            ("LKA", "Lane Keeping Assist"),
                            ("LCA", "Lane Centering Assist"),
                            ("ELK", "Emergency Lane Keeping"),
                        ],
                        default="NONE",
                        max_length=4,
                        verbose_name="Lane Assist System",
                    ),
                ),
                (
                    "blind_spot_monitoring",
                    models.CharField(
                        choices=[
                            ("NONE", "No Blind Spot Monitor"),
                            ("WARN", "Blind Spot Warning"),
                            ("INT", "Blind Spot Intervention"),
                            ("CAM", "Blind Spot Camera"),
                        ],
                        default="NONE",
                        max_length=4,
                        verbose_name="Blind Spot Monitoring",
                    ),
                ),
                (
                    "collision_warning_system",
                    models.CharField(
                        choices=[
                            ("NONE", "No Collision Warning"),
                            ("FCW", "Forward Collision Warning"),
                            ("AEB", "Automatic Emergency Braking"),
                            ("PED", "Pedestrian Detection"),
                            ("CYC", "Cyclist Detection"),
                        ],
                        default="NONE",
                        max_length=4,
                        verbose_name="Collision Warning System",
                    ),
                ),
                (
                    "has_cross_traffic_alert",
                    models.BooleanField(
                        default=False, verbose_name="Rear Cross Traffic Alert"
                    ),
                ),
                (
                    "has_traffic_sign_recognition",
                    models.BooleanField(
                        default=False, verbose_name="Traffic Sign Recognition"
                    ),
                ),
            ],
            options={
                "verbose_name": "Active Safety & ADAS",
                "verbose_name_plural": "Active Safety & ADAS Systems",
            },
        ),
        migrations.CreateModel(
            name="ElectricalSystem",
            fields=[
                (
                    "vehicle",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="electrical",
                        serialize=False,
                        to="vehicles.vehicle",
                    ),
                ),
                (
                    "primary_battery_type",
                    models.CharField(
                        choices=[
                            ("FLA", "Flooded Lead Acid"),
                            ("AGM", "Absorbent Glass Mat"),
                            ("GEL", "Gel Cell"),
                            ("LITH", "Lithium-Ion"),
                            ("EFB", "Enhanced Flooded Battery"),
                        ],
                        max_length=4,
                        verbose_name="Primary Battery Type",
                    ),
                ),
                (
                    "primary_battery_capacity",
                    models.PositiveIntegerField(
                        help_text="Primary battery capacity in amp-hours",
                        verbose_name="Capacity (Ah)",
                    ),
                ),
                (
                    "has_second_battery",
                    models.BooleanField(
                        default=False, verbose_name="Second Battery Installed"
                    ),
                ),
                (
                    "second_battery_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("FLA", "Flooded Lead Acid"),
                            ("AGM", "Absorbent Glass Mat"),
                            ("GEL", "Gel Cell"),
                            ("LITH", "Lithium-Ion"),
                            ("EFB", "Enhanced Flooded Battery"),
                        ],
                        max_length=4,
                        null=True,
                        verbose_name="Second Battery Type",
                    ),
                ),
                (
                    "second_battery_capacity",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Secondary battery capacity in amp-hours",
                        null=True,
                        verbose_name="Capacity (Ah)",
                    ),
                ),
                (
                    "alternator_output",
                    models.PositiveIntegerField(
                        help_text="Maximum alternator output in amps",
                        verbose_name="Alternator Output (A)",
                    ),
                ),
                (
                    "operating_voltage",
                    models.PositiveIntegerField(
                        choices=[
                            (12, "12V System"),
                            (24, "24V System"),
                            (48, "48V System (Mild Hybrid)"),
                            (400, "400V System (EV)"),
                            (800, "800V System (High Performance EV)"),
                        ],
                        default=12,
                        verbose_name="Operating Voltage",
                    ),
                ),
                (
                    "headlight_type",
                    models.CharField(
                        choices=[
                            ("HALO", "Halogen"),
                            ("HID", "Xenon HID"),
                            ("LED", "LED"),
                            ("LASER", "Laser"),
                            ("MATRIX", "Matrix LED"),
                        ],
                        max_length=6,
                        verbose_name="Headlight Type",
                    ),
                ),
                (
                    "headlight_control",
                    models.BooleanField(
                        default=False, verbose_name="Automatic Headlight Control"
                    ),
                ),
                (
                    "headlight_range_control",
                    models.BooleanField(
                        default=False, verbose_name="Automatic Headlight Range Control"
                    ),
                ),
                (
                    "instrument_cluster_type",
                    models.CharField(
                        choices=[
                            ("ANALOG", "Analog Gauges"),
                            ("DIGITAL", "Digital Display"),
                            ("HYBRID", "Hybrid Analog/Digital"),
                            ("HUD", "Head-Up Display"),
                        ],
                        max_length=20,
                        verbose_name="Instrument Cluster Type",
                    ),
                ),
                (
                    "socket_type",
                    models.CharField(
                        choices=[
                            ("12V", "12V Power Socket"),
                            ("USB", "USB Port"),
                            ("USB_C", "USB-C Port"),
                            ("110V", "110V AC Outlet"),
                            ("230V", "230V AC Outlet"),
                        ],
                        max_length=20,
                        verbose_name="Primary Socket Type",
                    ),
                ),
                (
                    "horn_type",
                    models.CharField(
                        choices=[
                            ("SINGLE", "Single Tone"),
                            ("DUAL", "Dual Tone"),
                            ("AIR", "Air Horn"),
                            ("ELECT", "Electronic Horn"),
                        ],
                        max_length=6,
                        verbose_name="Horn Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Electrical System",
                "verbose_name_plural": "Electrical Systems",
            },
        ),
        migrations.CreateModel(
            name="ExteriorFeaturesAndBody",
            fields=[
                (
                    "vehicle",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="exterior",
                        serialize=False,
                        to="vehicles.vehicle",
                    ),
                ),
                (
                    "body_style",
                    models.CharField(
                        choices=[
                            ("SEDAN", "Sedan"),
                            ("COUPE", "Coupe"),
                            ("HATCH", "Hatchback"),
                            ("SUV", "SUV"),
                            ("TRUCK", "Pickup Truck"),
                            ("VAN", "Van/Minivan"),
                            ("CONV", "Convertible"),
                            ("WAGON", "Station Wagon"),
                        ],
                        max_length=5,
                        verbose_name="Body Style",
                    ),
                ),
                (
                    "windshield_type",
                    models.CharField(
                        choices=[
                            ("LAM", "Laminated Glass"),
                            ("TEM", "Tempered Glass"),
                            ("ACOU", "Acoustic Glass"),
                            ("HEAT", "Heated Windshield"),
                        ],
                        max_length=4,
                        verbose_name="Windshield Glass Type",
                    ),
                ),
                (
                    "side_windows_type",
                    models.CharField(
                        choices=[
                            ("LAM", "Laminated Glass"),
                            ("TEM", "Tempered Glass"),
                            ("ACOU", "Acoustic Glass"),
                            ("HEAT", "Heated Windshield"),
                        ],
                        max_length=4,
                        verbose_name="Side/Rear Windows Type",
                    ),
                ),
                (
                    "has_chrome_package",
                    models.BooleanField(default=False, verbose_name="Chrome Package"),
                ),
                (
                    "has_roof_rails",
                    models.BooleanField(
                        default=False, verbose_name="Roof Rails/Load Rack"
                    ),
                ),
                (
                    "roof_type",
                    models.CharField(
                        choices=[
                            ("FIXED", "Fixed Roof"),
                            ("SUN", "Sunroof"),
                            ("PAN", "Panoramic Roof"),
                            ("SOFT", "Soft Top"),
                            ("HARD", "Hard Top Convertible"),
                            ("TARGA", "Targa Top"),
                        ],
                        max_length=5,
                        verbose_name="Roof Type",
                    ),
                ),
                (
                    "has_front_fog_lamp",
                    models.BooleanField(default=False, verbose_name="Front Fog Lamps"),
                ),
                (
                    "has_rear_fog_lamp",
                    models.BooleanField(default=False, verbose_name="Rear Fog Lamp"),
                ),
                (
                    "has_headlight_range_control",
                    models.BooleanField(
                        default=False, verbose_name="Headlight Range Control"
                    ),
                ),
                (
                    "has_scuff_plates",
                    models.BooleanField(default=False, verbose_name="Scuff Plates"),
                ),
                (
                    "has_loading_edge_protection",
                    models.BooleanField(
                        default=False, verbose_name="Loading Edge Protection"
                    ),
                ),
                (
                    "has_front_underbody_guard",
                    models.BooleanField(
                        default=False, verbose_name="Front Underbody Guard"
                    ),
                ),
                (
                    "wheel_type",
                    models.CharField(
                        choices=[
                            ("STEEL", "Steel Wheels"),
                            ("ALLOY", "Alloy Wheels"),
                            ("FORGED", "Forged Wheels"),
                            ("CARBON", "Carbon Fiber"),
                        ],
                        max_length=6,
                        verbose_name="Wheel Material",
                    ),
                ),
                (
                    "has_wheel_covers",
                    models.BooleanField(default=False, verbose_name="Wheel Covers"),
                ),
                (
                    "has_lockable_wheel_bolts",
                    models.BooleanField(
                        default=False, verbose_name="Lockable Wheel Bolts"
                    ),
                ),
                (
                    "has_spare_wheel",
                    models.BooleanField(default=False, verbose_name="Spare Wheel/Kit"),
                ),
                (
                    "has_trailer_hitch",
                    models.BooleanField(default=False, verbose_name="Trailer Hitch"),
                ),
                (
                    "tailgate_lock_type",
                    models.CharField(
                        choices=[
                            ("MAN", "Manual Lock"),
                            ("PWR", "Power Lock"),
                            ("HAND", "Hands-Free"),
                            ("APP", "App Controlled"),
                        ],
                        max_length=4,
                        verbose_name="Tailgate Lock Type",
                    ),
                ),
                (
                    "left_mirror_type",
                    models.CharField(
                        choices=[
                            ("MAN", "Manual"),
                            ("PWR", "Power"),
                            ("HTD", "Heated"),
                            ("AUTO", "Auto-Dimming"),
                            ("MEM", "Memory"),
                        ],
                        max_length=4,
                        verbose_name="Left Mirror Type",
                    ),
                ),
                (
                    "right_mirror_type",
                    models.CharField(
                        choices=[
                            ("MAN", "Manual"),
                            ("PWR", "Power"),
                            ("HTD", "Heated"),
                            ("AUTO", "Auto-Dimming"),
                            ("MEM", "Memory"),
                        ],
                        max_length=4,
                        verbose_name="Right Mirror Type",
                    ),
                ),
                (
                    "antenna_type",
                    models.CharField(
                        choices=[
                            ("FIX", "Fixed Mast"),
                            ("PWR", "Power Antenna"),
                            ("SHARK", "Shark Fin"),
                            ("INT", "Integrated"),
                            ("NONE", "No Visible Antenna"),
                        ],
                        max_length=5,
                        verbose_name="Antenna Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Exterior Features & Body",
                "verbose_name_plural": "Exterior Features & Body Components",
            },
        ),
    ]
